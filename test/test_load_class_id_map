#!/usr/bin/env python
"""
Unit test mllib.dataload module.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""

import unittest
import numpy as np
from pathlib import Path
from mllib.dataload import load_class_id_to_label_mapping

MLLIB_TMP_IMAGE_ROOT = "/tmp/mllib/mllib_unit_test/images"
CLASS_ID_MAP_FILE = "class_id_to_label.json"
CLASS_ID_MAP_PATH = Path(MLLIB_TMP_IMAGE_ROOT) / Path(CLASS_ID_MAP_FILE)
MLLIB_SUBDIRS = ["Abigail Johnson", "Bridget Barnes", "Cheryl Cooper"]
PROJECT_NAME = "mllib_unit_test"

class TestLoadClassIDMap(unittest.TestCase):

    def create_label_directories(self):
        # If not found
        mllib_image_dir = Path(MLLIB_TMP_IMAGE_ROOT)
        if mllib_image_dir.exists() is False:
            mllib_image_dir.mkdir(parents=True, exist_ok=True)

        for label_dir in MLLIB_SUBDIRS:
            label_path =mllib_image_dir / Path(label_dir)
            label_path.mkdir(parents=True, exist_ok=True)

    def test_load(self):
        """
        Test loading class ID to label map file.
        """
        self.create_label_directories()

        class_to_label_map, label_to_class_map = load_class_id_to_label_mapping(PROJECT_NAME, Path(MLLIB_TMP_IMAGE_ROOT))

        v = sorted(class_to_label_map.values())

        actual = v
        expected = ["Abigail Johnson", "Bridget Barnes", "Cheryl Cooper"]

        result = actual == expected
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))

        v = sorted(label_to_class_map.values())

        actual = v
        expected = [0, 1, 2]

        result = actual == expected
        self.assertTrue(result, "actual does not match expected. \nActual:\n%s, \nExpected:\n%s" % (actual, expected))


def main():
    """Invoke test function"""

    unittest.main()


if __name__ == "__main__":
    main()
